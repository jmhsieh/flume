////////////////////
Licensed to Cloudera, Inc. under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  Cloudera, Inc. licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
////////////////////

=== Running Tests

==== Running Functional Unit Tests

The core suite of tests (located in src/javatest) can be run by
using `ant test`.

To run only a specific test class, you can add a special argument to
the command line: `ant test -Dtestcase=<TestClass>` where
`<TestClass>` is the name of a unit test class.

Sometimes you may want to run all tests except for a few specific ones
(flaky tests perhaps).  This can be done by running `ant test
-Dtest.exclude.file=<file>`

Sometimes you may want to run only a selected set of tests.  This can
be done by running `ant test -Dtest.include.file=<file>`

In both of these cases the tests are specified line by line in ant
fileset format. The following example will recursively select all
files that start with TestFoo.

----
**/TestFoo*
----

==== Running Performance Microbenchmarks.

The suite of source and sink microbenchmark tests (located in
src/javaperf) can be run by using `ant perf`.

Just like with the normal test cases, you can use the
`-Dtestcase=<TestClass>`, `-Dtest.exclude.file=<file>`, and
`-Dtest.include.file=<file>` command line options.

So you can do:

----
ant perf -Dtestcase=PerfThriftSinks
----

The logs should output lines that are formatted similarly to these
lines:

----
[junit] nullsink,ubuntu,begin,10998597,552872,disk_loaded,2895851957,301662152,receiver_started,156786445,305698624,sink_started,105303802,305704456,thrift sink to thrift source done,39520160510,320377056,MB/s,4.579940971898899,23094932,320379168
    [junit] [                 0us,            547,544 b mem]    Starting (after gc) 
    [junit] [        10,998,597ns d         10,998,597ns            552,872 b mem]      begin
    [junit] [     2,914,443,637ns d      2,895,851,957ns        301,662,152 b mem]      disk_loaded
    [junit] [     3,514,297,391ns d        156,786,445ns        305,698,624 b mem]      receiver_started
    [junit] [     4,082,661,503ns d        105,303,802ns        305,704,456 b mem]      sink_started
    [junit] [    44,235,264,972ns d     39,520,160,510ns        320,377,056 b mem]      thrift sink to thrift source done
    [junit] [    44,878,445,315ns d         23,094,932ns        320,379,168 b mem]      MB/s,4.579940971898899
----

The first line is a summary of all the information in cvs format.  The
other lines are in a tabular, more human-readable form.  The left
column is cumulative time in ns and the middle is delta from previous
in ns.  The last column of numbers the amount of memory in heap,
followed but some comments or labels.